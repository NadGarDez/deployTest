{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","Box","sx","flexGrow","AppBar","Toolbar","IconButton","size","edge","color","aria-label","mr","Typography","variant","component","flexDirection","alignItems","justifyContent","height","padding","display","Paper","elevation","width","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"+PAwJeA,MA9Gf,WA4CE,OACE,eAACC,EAAA,EAAD,CAAKC,GAAI,CAAEC,SAAU,GAArB,UACE,cAACC,EAAA,EAAD,UACE,eAACC,EAAA,EAAD,WACE,cAACC,EAAA,EAAD,CACEC,KAAK,QACLC,KAAK,QACLC,MAAM,UACNC,aAAW,OACXR,GAAI,CAAES,GAAI,GALZ,SAOE,cAAC,IAAD,MAEF,cAACC,EAAA,EAAD,CAAYC,QAAQ,KAAKC,UAAU,MAAMZ,GAAI,CAAEC,SAAU,GAAzD,yBAGA,cAACF,EAAA,EAAD,CACEc,cAAc,SACdC,WAAW,SACXC,eAAe,SAHjB,SAKE,cAACX,EAAA,EAAD,CACEC,KAAK,QACLC,KAAK,QACLC,MAAM,UACNC,aAAW,OACXR,GAAI,CAAES,GAAI,GALZ,SAOE,cAAC,IAAD,aAKR,cAACN,EAAA,EAAD,IAEA,cAACJ,EAAA,EAAD,CACEC,GAAI,CACFC,SAAU,EACVe,OAAQ,OACRC,QAAS,EACTC,QAAS,OACTJ,WAAY,SACZC,eAAgB,UAPpB,SAUE,cAACI,EAAA,EAAD,CACEC,UAAW,EACXL,eAAe,SACfD,WAAW,SACXd,GAAI,CAAEqB,MAAO,OAAQJ,QAAS,GAJhC,SAME,cAAClB,EAAA,EAAD,CACEC,GAAI,CACFkB,QAAS,OACTH,eAAgB,SAChBD,WAAY,UAJhB,SAOE,cAACJ,EAAA,EAAD,CAAYC,QAAQ,KAApB,wCCpIGW,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.5e14bb02.chunk.js","sourcesContent":["import React from \"react\";\nimport {\n  Box,\n  AppBar,\n  Toolbar,\n  IconButton,\n  Paper,\n  Typography,\n} from \"@mui/material\";\nimport MenuIcon from \"@mui/icons-material/Menu\";\nimport AccountCircle from \"@mui/icons-material/AccountCircle\";\n\n/*\nimport React, { lazy, Suspense, useState } from 'react';\nimport { BrowserRouter, Route, Routes } from 'react-router-dom';\nimport ErrorBoundary from './ErrorBoundary';\nimport { ColorContext } from './contexts/colorContex';\nimport themeColors from './styles/colors';\n\nconst Lazy =lazy(()=>{\n  return new Promise(\n    (resolve, reject) =>{\n      setTimeout(() => {\n       resolve(import('./asyncModule'))\n       //reject(new Error());\n      }, 5000);\n    }\n  )\n});\n\nconst Lazy2 =lazy(()=>{\n  return new Promise(\n    (resolve, reject) =>{\n      setTimeout(() => {\n       resolve(import('./routeTwo'))\n      \n      }, 5000);\n    }\n  )\n});\n*/\n\nfunction App() {\n  /*\n  const [theme,setTheme] = useState(\n    themeColors.dark\n  )\n\n  const toggleTheme = (theme)=>theme === 'dark' ? setTheme(themeColors.dark) : setTheme(themeColors.ligth);\n\n  const RouteOne = ()=>{\n    return (\n      <ErrorBoundary>\n        <Suspense fallback={<p>Loading...</p>}>\n          <Lazy toogle={toggleTheme}/>\n        </Suspense>\n      </ErrorBoundary>\n    )\n  }\n\n  const RouteTwo = ()=>{\n    return(\n      <ErrorBoundary>\n      <Suspense fallback={<p>Loading...</p>}>\n        <Lazy2 toogle={toggleTheme}/>\n      </Suspense>\n    </ErrorBoundary>\n    );\n  }\n  \n\n  return (\n    <ColorContext.Provider value={{theme:theme}}>\n      <div style={{height:80, width:'100%', backgroundColor:'red'}}>\n          <p>Some header</p>\n        </div>\n      <BrowserRouter>\n        <Routes>\n          <Route path=\"/\" element={<RouteOne/>}/>\n          <Route path=\"2\" element={<RouteTwo/>}/>\n        </Routes>\n      </BrowserRouter>\n    </ColorContext.Provider>\n  );\n  */\n\n  return (\n    <Box sx={{ flexGrow: 1 }}>\n      <AppBar>\n        <Toolbar>\n          <IconButton\n            size=\"large\"\n            edge=\"start\"\n            color=\"inherit\"\n            aria-label=\"menu\"\n            sx={{ mr: 2 }}\n          >\n            <MenuIcon />\n          </IconButton>\n          <Typography variant=\"h6\" component=\"div\" sx={{ flexGrow: 1 }}>\n            Adrian Site\n          </Typography>\n          <Box\n            flexDirection=\"column\"\n            alignItems=\"center\"\n            justifyContent=\"center\"\n          >\n            <IconButton\n              size=\"large\"\n              edge=\"start\"\n              color=\"inherit\"\n              aria-label=\"menu\"\n              sx={{ mr: 2 }}\n            >\n              <AccountCircle />\n            </IconButton>\n          </Box>\n        </Toolbar>\n      </AppBar>\n      <Toolbar />\n\n      <Box\n        sx={{\n          flexGrow: 1,\n          height: \"100%\",\n          padding: 5,\n          display: \"flex\",\n          alignItems: \"center\",\n          justifyContent: \"center\",\n        }}\n      >\n        <Paper\n          elevation={3}\n          justifyContent=\"center\"\n          alignItems=\"center\"\n          sx={{ width: \"100%\", padding: 5 }}\n        >\n          <Box\n            sx={{\n              display: \"flex\",\n              justifyContent: \"center\",\n              alignItems: \"center\",\n            }}\n          >\n            <Typography variant=\"h2\">Este es mi sitio</Typography>\n          </Box>\n        </Paper>\n      </Box>\n    </Box>\n  );\n}\n\nexport default App;\n","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import(\"web-vitals\").then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}